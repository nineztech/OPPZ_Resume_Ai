#!/usr/bin/env python3
"""
Environment Setup Script for Gemini Resume Parser
This script helps you set up the required environment variables.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with required environment variables"""
    env_file = Path('.env')
    
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return False
    
    print("\nüîë Gemini Resume Parser Environment Setup")
    print("=" * 50)
    
    # Get Gemini API Key
    print("\nüìã Step 1: Gemini API Key")
    print("You need a Google Gemini API key to use this service.")
    print("Get it from: https://makersuite.google.com/app/apikey")
    print()
    
    api_key = input("Enter your Gemini API Key: ").strip()
    if not api_key:
        print("‚ùå API Key is required!")
        return False
    
    # Get model preference
    print("\nü§ñ Step 2: Gemini Model (Optional)")
    print("Available models: gemini-2.5-flash, gemini-1.5-pro, gemini-2.0-flash")
    model = input("Enter model name (default: gemini-2.5-flash): ").strip()
    if not model:
        model = "gemini-2.5-flash"
    
    # Get file size limit
    print("\nüìÅ Step 3: File Size Limit (Optional)")
    max_size = input("Enter max PDF size in MB (default: 10): ").strip()
    if not max_size:
        max_size = "10"
    
    # Get logging level
    print("\nüìù Step 4: Logging Level (Optional)")
    print("Options: DEBUG, INFO, WARNING, ERROR")
    log_level = input("Enter logging level (default: INFO): ").strip()
    if not log_level:
        log_level = "INFO"
    
    # Create .env file content
    env_content = f"""# Gemini Resume Parser Environment Configuration
# Generated by setup script

# Required: Your Google Gemini API Key
GEMINI_API_KEY={api_key}

# Optional: Gemini model to use
GEMINI_MODEL={model}

# Optional: Maximum PDF file size in MB
MAX_PDF_SIZE_MB={max_size}

# Optional: Logging level
LOG_LEVEL={log_level}
"""
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"\n‚úÖ .env file created successfully at: {env_file.absolute()}")
        print("\nüîß Next steps:")
        print("1. Install required packages: pip install -r requirements.txt")
        print("2. Test the setup: python test_parser.py")
        print("3. Run the web UI: python web_ui.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {e}")
        return False

def validate_setup():
    """Validate that the environment is properly configured"""
    print("\nüîç Validating Environment Setup")
    print("=" * 40)
    
    # Check if .env file exists
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ùå .env file not found!")
        return False
    
    # Check if required packages are installed
    try:
        import google.generativeai
        print("‚úÖ google-generativeai package installed")
    except ImportError:
        print("‚ùå google-generativeai package not installed")
        print("   Run: pip install -r requirements.txt")
        return False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv package installed")
    except ImportError:
        print("‚ùå python-dotenv package not installed")
        print("   Run: pip install -r requirements.txt")
        return False
    
    # Load environment variables
    load_dotenv()
    
    # Check API key
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY not found in environment")
        return False
    elif api_key == 'your_gemini_api_key_here':
        print("‚ùå GEMINI_API_KEY is still set to placeholder value")
        return False
    else:
        print("‚úÖ GEMINI_API_KEY configured")
    
    # Check model
    model = os.getenv('GEMINI_MODEL', 'gemini-2.5-flash')
    print(f"‚úÖ GEMINI_MODEL: {model}")
    
    # Check file size limit
    max_size = os.getenv('MAX_PDF_SIZE_MB', '10')
    print(f"‚úÖ MAX_PDF_SIZE_MB: {max_size}")
    
    # Check logging level
    log_level = os.getenv('LOG_LEVEL', 'INFO')
    print(f"‚úÖ LOG_LEVEL: {log_level}")
    
    print("\nüéâ Environment setup is valid!")
    return True

def main():
    """Main setup function"""
    print("üöÄ Gemini Resume Parser Setup")
    print("=" * 40)
    
    # Check if we're in the right directory
    if not Path('config/config.py').exists():
        print("‚ùå Please run this script from the gemini_resume_parser directory")
        sys.exit(1)
    
    # Show menu
    while True:
        print("\nOptions:")
        print("1. Create/Update .env file")
        print("2. Validate current setup")
        print("3. Exit")
        
        choice = input("\nSelect an option (1-3): ").strip()
        
        if choice == '1':
            if create_env_file():
                print("\n‚ú® Setup completed successfully!")
            else:
                print("\n‚ùå Setup failed. Please try again.")
        
        elif choice == '2':
            validate_setup()
        
        elif choice == '3':
            print("\nüëã Goodbye!")
            break
        
        else:
            print("‚ùå Invalid option. Please try again.")

if __name__ == "__main__":
    main()
